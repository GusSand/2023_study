- completion: "def removeElement(nums, val):\n    k = 0\n    for i in range(len(nums)):\n\
    \        if nums[i] != val:\n            nums[k] = nums[i]\n            k += 1\n\
    \    return k"
  task_id: UserEval/1
- completion: "def isPalindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n\
    \    return s == s[::-1]"
  task_id: UserEval/2
- completion: "def setZeroes(matrix):\n    row_zero = False\n    col_zero = False\n\
    \    \n    m = len(matrix)\n    n = len(matrix[0])\n    \n    for i in range(m):\n\
    \        for j in range(n):\n            if matrix[i][j] == 0:\n             \
    \   if i == 0:\n                    row_zero = True\n                if j == 0:\n\
    \                    col_zero = True\n                matrix[0][j] = 0\n     \
    \           matrix[i][0] = 0\n    \n    for i in range(1, m):\n        if matrix[i][0]\
    \ == 0:\n            for j in range(1, n):\n                matrix[i][j] = 0\n\
    \    \n    for j in range(1, n):\n        if matrix[0][j] == 0:\n            for\
    \ i in range(1, m):\n                matrix[i][j] = 0\n    \n    if row_zero:\n\
    \        for j in range(n):\n            matrix[0][j] = 0\n    \n    if col_zero:\n\
    \        for i in range(m):\n            matrix[i][0] = 0\n\n# Test cases\nmatrix1\
    \ = [[1,1,1],[1,0,1],[1,1,1]]\nsetZeroes(matrix1)\nprint(matrix1)\n\nmatrix2 =\
    \ [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nsetZeroes(matrix2)\nprint(matrix2)"
  task_id: UserEval/3
- completion: "class ListNode:\n    def __init__(self, val=0, next=None):\n      \
    \  self.val = val\n        self.next = next\n\ndef mergeKLists(lists):\n    merged_list\
    \ = []\n    for linked_list in lists:\n        while linked_list:\n          \
    \  merged_list.append(linked_list.val)\n            linked_list = linked_list.next\n\
    \    merged_list.sort()\n    \n    dummy = ListNode(0)\n    current = dummy\n\
    \    for num in merged_list:\n        current.next = ListNode(num)\n        current\
    \ = current.next\n    \n    return dummy.next"
  task_id: UserEval/4
- completion: "def letterCombinations(digits):\n    if not digits:\n        return\
    \ []\n    \n    phone_mapping = {\n        '2': 'abc',\n        '3': 'def',\n\
    \        '4': 'ghi',\n        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n\
    \        '8': 'tuv',\n        '9': 'wxyz'\n    }\n    \n    def backtrack(combination,\
    \ next_digits):\n        if len(next_digits) == 0:\n            output.append(combination)\n\
    \        else:\n            for letter in phone_mapping[next_digits[0]]:\n   \
    \             backtrack(combination + letter, next_digits[1:])\n             \
    \   \n    output = []\n    backtrack('', digits)\n    \n    return output\n\n\
    #Test the function with examples\nprint(letterCombinations(\"23\"))\nprint(letterCombinations(\"\
    \"))\nprint(letterCombinations(\"2\"))"
  task_id: UserEval/5
- completion: "def int_to_mini_roman(num):\n    roman_numerals = {\n        1000:\
    \ 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100:\
    \ 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n\
    \        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n\
    \    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n \
    \       while num >= value:\n            roman_numeral += numeral\n          \
    \  num -= value\n\n    return roman_numeral.lower()\n\nprint(int_to_mini_roman(19))\
    \  # Output: 'xix'\nprint(int_to_mini_roman(152))  # Output: 'clii'\nprint(int_to_mini_roman(426))\
    \  # Output: 'cdxxvi'"
  task_id: UserEval/6
- completion: "def parse_nested_parens(s: str) -> List[int]:\n    depths = []\n  \
    \  for group in s.split():\n        depth = 0\n        max_depth = 0\n       \
    \ for char in group:\n            if char == '(':\n                depth += 1\n\
    \                max_depth = max(max_depth, depth)\n            elif char == ')':\n\
    \                depth -= 1\n        depths.append(max_depth)\n    return depths"
  task_id: UserEval/7
- completion: "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char\
    \ in vowels:\n                encoded_message += chr((ord(char) - ord('a') + 2)\
    \ % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26\
    \ + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n\
    \        else:\n            encoded_message += char\n    return encoded_message"
  task_id: UserEval/8
- completion: "def tribonacci(n):\n    if n == 0:\n        return [0]\n    elif n\
    \ == 1:\n        return [1, 3]\n    else:\n        trib_list = [1, 3]\n      \
    \  for i in range(2, n + 1):\n            if i % 2 == 0:\n                trib_list.append(trib_list[-1]\
    \ + trib_list[-2] + trib_list[-3])\n            else:\n                trib_list.append(1\
    \ + i // 2)\n        return trib_list\n\n#Example: \nprint(tribonacci(3))  # Output:\
    \ [1, 3, 2, 8]"
  task_id: UserEval/9
- completion: "def words_string(s):\n    words = [word.strip() for word in s.replace(',',\
    \ ' ').split()]\n    return words"
  task_id: UserEval/10

- task_id: UserEval/1
  prompt: >
    Write a function that takes a message, and encodes in such a way that it 
    swaps case of all letters, 
    replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. 
    Assume only letters. 

    Examples: 
    >>> encode('test') 'TGST' 
    >>> encode('This is a message') 'tHKS KS C MGSSCGG'
  
  function_signature: |
    def encode(message):
        # Your code here
        pass
  
  tests:
    - input: "test"
      expected: "TGST"
    - input: "Mudasir"
      expected: "mWDCSKR"
    - input: "YES"
      expected: "ygs"
    - input: "This is a message"
      expected: "tHKS KS C MGSSCGG"
    - input: "I DoNt KnOw WhAt tO WrItE"
      expected: "k dQnT kNqW wHcT Tq wRkTg"
  
  entry_point: encode

- task_id: UserEval/2
  prompt: >
    A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

    Given a string s, return true if it is a palindrome, or false otherwise.

    Example 1:
    Input: s = "A man, a plan, a canal: Panama"
    Output: true
    Explanation: "amanaplanacanalpanama" is a palindrome.

    Example 2:
    Input: s = "race a car"
    Output: false
    Explanation: "raceacar" is not a palindrome.

    Example 3:
    Input: s = " "
    Output: true
    Explanation: s is an empty string "" after removing non-alphanumeric characters.
    Since an empty string reads the same forward and backward, it is a palindrome.

    Constraints:
    1 <= s.length <= 2 * 10^5
    s consists only of printable ASCII characters.
  
  function_signature: |
    def isPalindrome(s):
        # Your code here
        pass
  
  tests:
    - input: "A man, a plan, a canal: Panama"
      expected: True
    - input: "race a car"
      expected: False
    - input: " "
      expected: True
  
  entry_point: isPalindrome

- task_id: UserEval/3
  prompt: >
    You will be given a string of words separated by commas or spaces. 
    Your task is to split the string into words and return an array of the words. 

    For example: 

    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"] 
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
  
  function_signature: |
    def words_string(s):
        # Your code here
        pass
  
  tests:
    - input: "Hi, my name is John"
      expected: ["Hi", "my", "name", "is", "John"]
    - input: "One, two, three, four, five, six"
      expected: ["One", "two", "three", "four", "five", "six"]
  
  entry_point: words_string
- task_id: UserEval/1
  prompt: >
    Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. 
    The order of the elements may be changed. Then return the number of elements in nums which are not equal 
    to val. Consider the number of elements in nums which are not equal to val be k, to get accepted, 
    you need to do the following things:
    Change the array nums such that the first k elements of nums contain the elements which are not 
    equal to val. The remaining elements of nums are not important as well as the size of nums.
    Return k.
    Custom Judge:

    The judge will test your solution with the following code:

    int[] nums = [...]; // Input array
    int val = ...; // Value to remove
    int[] expectedNums = [...]; // The expected answer with correct length.
                                // It is sorted with no values equaling val.

    int k = removeElement(nums, val); // Calls your implementation

    assert k == expectedNums.length;
    sort(nums, 0, k); // Sort the first k elements of nums
    for (int i = 0; i < actualLength; i++) {
        assert nums[i] == expectedNums[i];
    }
    If all assertions pass, then your solution will be accepted.

    Example 1:

    Input: nums = [3,2,2,3], val = 3
    Output: 2, nums = [2,2,_,_]
    Explanation: Your function should return k = 2, with the first two elements of nums being 2.
    It does not matter what you leave beyond the returned k (hence they are underscores).
    Example 2:

    Input: nums = [0,1,2,2,3,0,4,2], val = 2
    Output: 5, nums = [0,1,4,0,3,_,_,_]
    Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
    Note that the five elements can be returned in any order.
    It does not matter what you leave beyond the returned k (hence they are underscores).
    

    Constraints:

    0 <= nums.length <= 100
    0 <= nums[i] <= 50
    0 <= val <= 100

  function_signature: |
    def removeElement(nums, val):

  tests:
    - input: "[3,2,2,3], 3"
      expected: 2
    - input: "[0,1,2,2,3,0,4,2], 2"
      expected: 5
    - input: "[0,1,2,2,3,0,4,2], 0"
      expected: 6
    - input: "[0,1,2,2,3,0,4,2], 4"
      expected: 7
    - input: "[0,1,2,2,3,0,4,2], 5"
      expected: 8

  entry_point: removeElement

- task_id: UserEval/2
  prompt: >
    A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

    Given a string s, return true if it is a palindrome, or false otherwise.

    Example 1:
    Input: s = "A man, a plan, a canal: Panama"
    Output: true
    Explanation: "amanaplanacanalpanama" is a palindrome.

    Example 2:
    Input: s = "race a car"
    Output: false
    Explanation: "raceacar" is not a palindrome.

    Example 3:
    Input: s = " "
    Output: true
    Explanation: s is an empty string "" after removing non-alphanumeric characters.
    Since an empty string reads the same forward and backward, it is a palindrome.

    Constraints:
    1 <= s.length <= 2 * 10^5
    s consists only of printable ASCII characters.
  
  function_signature: |
    def isPalindrome(s):
        # Your code here
        pass
  
  tests:
    - input: "A man, a plan, a canal: Panama"
      expected: True
    - input: "race a car"
      expected: False
    - input: " "
      expected: True
  
  entry_point: isPalindrome

- task_id: UserEval/3
  prompt: >
    Given an m x n integer matrix matrix, if an element is 0, 
    set its entire row and column to 0's.

    You must do it in place.

    

    Example 1:


    Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
    Output: [[1,0,1],[0,0,0],[1,0,1]]

    Example 2:
    Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
    Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
    

    Constraints:

    m == matrix.length
    n == matrix[0].length
    1 <= m, n <= 200
    -231 <= matrix[i][j] <= 231 - 1

  function_signature: |
    def setZeroes(matrix):
      # Your code here
      pass

  canonical_solution: |
    def setZeroes(matrix):
      
      rows, cols = len(matrix), len(matrix[0])
      zero_rows, zero_cols = set(), set()
      
      for i in range(rows):
          for j in range(cols):
              if matrix[i][j] == 0:
                  zero_rows.add(i)
                  zero_cols.add(j)
                  
      for i in range(rows):
          for j in range(cols):
              if i in zero_rows or j in zero_cols:
                  matrix[i][j] = 0
                  
      return matrix

  tests:
    - input: "[[1,1,1],[1,0,1],[1,1,1]]"
      expected: [[1,0,1],[0,0,0],[1,0,1]]
    - input: "[[0,1,2,0],[3,4,5,2],[1,3,1,5]]"
      expected: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
    - input: "[[1,2,3],[4,5,6],[7,8,9]]"
      expected: [[1,2,3],[4,5,6],[7,8,9]]
    - input: "[[1,2,3],[4,0,6],[7,8,9]]"
      expected: [[1,0,3],[0,0,0],[7,0,9]]
    - input: "[[1,2,3],[4,5,6],[7,0,9]]"
      expected: [[1,0,3],[4,0,6],[0,0,0]]

  entry_point:
    setZeroes

- task_id: UserEval/4
  prompt: >
    you are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

    Merge all the linked-lists into one sorted linked-list and return it.
    Example 1:

    Input: lists = [[1,4,5],[1,3,4],[2,6]]
    Output: [1,1,2,3,4,4,5,6]
    Explanation: The linked-lists are:
    [
      1->4->5,
      1->3->4,
      2->6
    ]
    merging them into one sorted list:
    1->1->2->3->4->4->5->6
    Example 2:

    Input: lists = []
    Output: []
    Example 3:

    Input: lists = [[]]
    Output: []
    

    Constraints:

    k == lists.length
    0 <= k <= 104
    0 <= lists[i].length <= 500
    -104 <= lists[i][j] <= 104
    lists[i] is sorted in ascending order.
    The sum of lists[i].length will not exceed 104.

  function_signature: |
    def mergeKLists(lists):
      # Your code here
      pass

  canonical_solution: |
    def mergeKLists(lists):
      merged = []
      for l in lists:
        merged.extend(l)
        
      return sorted(merged)
  
  tests:
    - input: "[[1,4,5],[1,3,4],[2,6]]"
      expected: [1,1,2,3,4,4,5,6]
    - input: "[]"
      expected: []
    - input: "[[]]"
      expected: []
    - input: "[[1,2,3],[4,5,6],[7,8,9]]"
      expected: [1,2,3,4,5,6,7,8,9]
    - input: "[[1,2,3],[4,0,6],[7,8,9]]"
      expected: [0,1,2,3,4,6,7,8,9]
    - input: "[[1,2,3],[4,5,6],[7,0,9]]"
      expected: [0,1,2,3,4,5,6,7,9]

  entry_point: mergeKLists

- task_id: UserEval/5
  prompt: > 
    Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
    A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

    Example 1:

    Input: digits = "23"
    Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
    Example 2:

    Input: digits = ""
    Output: []
    Example 3:

    Input: digits = "2"
    Output: ["a","b","c"]
    

    Constraints:

    0 <= digits.length <= 4
    digits[i] is a digit in the range ['2', '9'].

  function_signature: |
    def letterCombinations(digits):
      # Your code here
      pass

  tests: 
    - input: "23"
      expected: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
    - input: ""
      expected: []
    - input: "2"
      expected: ["a","b","c"]
    - input: "234"
      expected: ["adg","adh","adi","aeg","aeh","aei","afg","afh","afi","bdg","bdh","bdi","beg","beh","bei","bfg","bfh","bfi","cdg","cdh","cdi","ceg","ceh","cei","cfg","cfh","cfi"]
 
  entry_point: letterCombinations

- task_id: UserEval/6
  prompt: >
    Given a positive integer, obtain its roman numeral equivalent as a string, 
    and return it in lowercase. 
    Restrictions: 1 <= num <= 1000 
    Examples: 
    >>> int_to_mini_roman(19) == 'xix' 
    >>> int_to_mini_roman(152) == 'clii' 
    >>> int_to_mini_roman(426) == 'cdxxvi' 
  function_signature: |
    def int_to_mini_roman(num):
        # Your code here
        pass
  tests:
    - input: 19
      expected: "xix"
    - input: 152
      expected: "clii"
    - input: 426
      expected: "cdxxvi"
    - input: 1000
      expected: "m"
    - input: 1
      expected: "i"
  entry_point: int_to_mini_roman

- task_id: UserEval/7
  prompt: >
    Input to this function is a string represented multiple groups for nested 
    parentheses separated by spaces. 
    For each of the group, output the deepest level of nesting of parentheses. 
    E.g. 
    (()()) has maximum two levels of nesting 
    ((())) has three. 

    >>> parse_nested_parens('(()()) ((())) () ((())()())') [2, 3, 1, 3] 
  function_signature: |
    def parse_nested_parens(s):
        # Your code here
        pass
  tests:
    - input: "(()()) ((())) () ((())()())"
      expected: [2, 3, 1, 3]
    - input: "((()))"
      expected: [3]
    - input: "((())) ()"
      expected: [3, 1]
    - input: "((())) () ((()))"
      expected: [3, 1, 3]
    - input: "((())) () ((())) ()"
      expected: [3, 1, 3, 1]

  entry_point: parse_nested_parens

- task_id: UserEval/8
  prompt: >
    Write a function that takes a message, and encodes in such a way that it 
    swaps case of all letters, 
    replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. 
    Assume only letters. 

    Examples: 
    >>> encode('test') 'TGST' 
    >>> encode('This is a message') 'tHKS KS C MGSSCGG'
  
  function_signature: |
    def encode(message):
        # Your code here
        pass
  
  tests:
    - input: "test"
      expected: "TGST"
    - input: "Mudasir"
      expected: "mWDCSKR"
    - input: "YES"
      expected: "ygs"
    - input: "This is a message"
      expected: "tHKS KS C MGSSCGG"
    - input: "I DoNt KnOw WhAt tO WrItE"
      expected: "k dQnT kNqW wHcT Tq wRkTg"
  
  entry_point: encode

- task_id: UserEval/9
  prompt: >
    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians 
    in the last couple centuries. However, what people don't know is Tribonacci sequence. 

    Tribonacci sequence is defined by the recurrence: 
    tri(1) = 3 tri(n) = 1 + n / 2, if n is even. 
    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. 

    For example: 
    tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 

    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence. Examples: tri(3) = [1, 3, 2, 8] 

  function_signature: |
    def tribonacci(n):
        # Your code here
        pass

  tests:
    - input: 3
      expected: [1, 3, 2, 8]
    - input: 4
      expected: [1, 3, 2, 8, 14]
    - input: 5
      expected: [1, 3, 2, 8, 14, 25]
    - input: 6
      expected: [1, 3, 2, 8, 14, 25, 47]
    - input: 7
      expected: [1, 3, 2, 8, 14, 25, 47, 86]

  entry_point: tribonacci

- task_id: UserEval/10
  prompt: >
    You will be given a string of words separated by commas or spaces. 
    Your task is to split the string into words and return an array of the words. 

    For example: 

    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"] 
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
  
  function_signature: |
    def words_string(s):
        # Your code here
        pass
  
  tests:
    - input: "Hi, my name is John"
      expected: ["Hi", "my", "name", "is", "John"]
    - input: "One, two, three, four, five, six"
      expected: ["One", "two", "three", "four", "five", "six"]
  
  entry_point: words_string


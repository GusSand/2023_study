- completion: "def removeElement(nums, val):\n    k = 0  # Initialize a pointer for\
    \ the valid elements\n    for num in nums:\n        if num != val:\n         \
    \   nums[k] = num  # Place the non-val element at the k-th position\n        \
    \    k += 1  # Increment the valid length counter\n    return k  # Return the\
    \ number of valid elements"
  task_id: UserEval/1
- completion: "def isPalindrome(s: str) -> bool:\n    # Preprocess the string: lower\
    \ case and filter non-alphanumeric characters\n    filtered_chars = [char.lower()\
    \ for char in s if char.isalnum()]\n    # Check if the filtered list is the same\
    \ forwards and backwards\n    return filtered_chars == filtered_chars[::-1]"
  task_id: UserEval/2
- completion: "def setZeroes(matrix):\n    if not matrix:\n        return\n\n    rows,\
    \ cols = len(matrix), len(matrix[0])\n    row_zero = False\n    \n    # Determine\
    \ if the first row needs to be zeroed\n    for j in range(cols):\n        if matrix[0][j]\
    \ == 0:\n            row_zero = True\n            break\n\n    # Use the first\
    \ row and first column to mark zeroes\n    for i in range(1, rows):\n        for\
    \ j in range(1, cols):\n            if matrix[i][j] == 0:\n                matrix[i][0]\
    \ = 0\n                matrix[0][j] = 0\n\n    # Zero out cells based on marks\n\
    \    for i in range(1, rows):\n        for j in range(1, cols):\n            if\
    \ matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n\
    \    # Zero out the first row if needed\n    if row_zero:\n        for j in range(cols):\n\
    \            matrix[0][j] = 0\n\n    # Zero out the first column\n    for i in\
    \ range(rows):\n        if matrix[i][0] == 0:\n            for j in range(cols):\n\
    \                matrix[i][j] = 0"
  task_id: UserEval/3
- completion: "from typing import List, Optional\n\nclass ListNode:\n    def __init__(self,\
    \ val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef\
    \ merge_k_lists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    import\
    \ heapq\n    \n    # Use a heap (priority queue) to store the nodes\n    min_heap\
    \ = []\n    \n    # Initialize the heap with the head nodes of each list\n   \
    \ for l in lists:\n        if l:\n            heapq.heappush(min_heap, (l.val,\
    \ l))\n    \n    # Dummy head for the result linked list\n    dummy = ListNode(0)\n\
    \    current = dummy\n    \n    while min_heap:\n        # Get the smallest node\
    \ from the heap\n        val, node = heapq.heappop(min_heap)\n        current.next\
    \ = ListNode(val)\n        current = current.next\n        \n        # If there's\
    \ a next node in the list, push it to the heap\n        if node.next:\n      \
    \      heapq.heappush(min_heap, (node.next.val, node.next))\n    \n    return\
    \ dummy.next"
  task_id: UserEval/4
- completion: "from typing import List\n\ndef letterCombinations(digits: str) -> List[str]:\n\
    \    if not digits:\n        return []\n    \n    # Mapping of digits to letters\n\
    \    phone_map = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n\
    \        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n        '8':\
    \ 'tuv',\n        '9': 'wxyz'\n    }\n    \n    def backtrack(index: int, path:\
    \ str):\n        if index == len(digits):\n            combinations.append(path)\n\
    \            return\n        \n        possible_letters = phone_map[digits[index]]\n\
    \        for letter in possible_letters:\n            backtrack(index + 1, path\
    \ + letter)\n    \n    combinations = []\n    backtrack(0, \"\")\n    return combinations"
  task_id: UserEval/5
- completion: "def int_to_mini_roman(num):\n    roman_numerals = [\n        (1000,\
    \ 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n   \
    \     (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n\
    \        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n\
    \        (1, 'i')\n    ]\n    \n    result = []\n    \n    for value, symbol in\
    \ roman_numerals:\n        while num >= value:\n            result.append(symbol)\n\
    \            num -= value\n            \n    return ''.join(result)\n\n# Example\
    \ usage:\n# print(int_to_mini_roman(19))  # Output: 'xix'\n# print(int_to_mini_roman(152))\
    \ # Output: 'clii'\n# print(int_to_mini_roman(426)) # Output: 'cdxxvi'"
  task_id: UserEval/6
- completion: "def parse_nested_parens(s):\n    def max_nesting_depth(group):\n  \
    \      max_depth = 0\n        current_depth = 0\n        for char in group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        return max_depth\n\n    return [max_nesting_depth(group)\
    \ for group in s.split()]"
  task_id: UserEval/7
- completion: "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message\
    \ = []\n\n    for char in message:\n        if char.isalpha():\n            #\
    \ Swap case\n            if char in vowels:\n                # Replace vowel with\
    \ the letter 2 places ahead\n                if char.islower():\n            \
    \        new_char = chr(ord(char) + 2)\n                else:\n              \
    \      new_char = chr(ord(char.lower()) + 2).upper()\n            else:\n    \
    \            new_char = char.swapcase()\n            encoded_message.append(new_char)\n\
    \        else:\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\
    \n# Example usage\nprint(encode('test'))            # 'TGST'\nprint(encode('This\
    \ is a message'))  # 'tHKS KS C MGSSCGG'"
  task_id: UserEval/8
- completion: "def tribonacci(n):\n    result = []\n    \n    def tri(k):\n      \
    \  if k == 1:\n            return 3\n        elif k % 2 == 0:\n            return\
    \ 1 + k / 2\n        else:\n            return tri(k - 1) + tri(k - 2) + tri(k\
    \ + 1)\n\n    for i in range(n + 1):\n        result.append(tri(i))\n    \n  \
    \  return result"
  task_id: UserEval/9
- completion: "def words_string(s):\n    return [word for word in s.replace(',', '\
    \ ').split() if word]"
  task_id: UserEval/10
